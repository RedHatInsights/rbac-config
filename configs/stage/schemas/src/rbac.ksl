version 0.1
namespace rbac

public type principal {} //public for now since the [bool] type requires rbac/principal to be accessible

// Other types for structuring access are marked internal but can be made public if services are intended to relate to them
internal type platform {
    relation binding: [Any role_binding]
}

internal type tenant {
    relation platform: [ExactlyOne platform]
    relation binding: [Any role_binding]
}

internal type group {
    relation owner: [ExactlyOne tenant]
    relation member: [Any principal or group.member]
}

internal type role {
    private relation all_all_all: [bool]
    private relation child: [Any role]
}

internal type role_binding { // TODO: revisit cardinality based on clamping decisions
    relation subject: [Any principal or group.member]
    relation role: [Any role]
}

public type workspace { //Workspace is public so services can place resources into workspaces
    relation parent: [ExactlyOne workspace or tenant]
    relation binding: [Any role_binding]
}

// Adds a permission that's checkable at the workspace but granted by assigning a different, V1 permission to the role
public extension add_v1_based_permission(app, resource, verb, v2_perm) {
    type role {
        allow_duplicates private relation `${app}_all_all`: [bool]
        allow_duplicates private relation `${app}_${resource}_all`: [bool]
        allow_duplicates private relation `${app}_all_${verb}`: [bool]
        allow_duplicates private relation `${app}_${resource}_${verb}`: [bool]

        relation `${v2_perm}`: `${app}_${resource}_${verb}` or `${app}_${resource}_all` or `${app}_all_${verb}` or `${app}_all_all` or all_all_all or child.`${v2_perm}`
    }

    type role_binding {
        relation `${v2_perm}`: subject and role.`${v2_perm}`
    }

    type platform {
        relation `${v2_perm}`: binding.`${v2_perm}`
    }

    type tenant {
        relation `${v2_perm}`: binding.`${v2_perm}` or platform.`${v2_perm}`
    }

    type workspace {
        relation `${v2_perm}`: binding.`${v2_perm}` or parent.`${v2_perm}`
    }
}

// Adds a permission that's only assignable to the role, for migration purposes
public extension add_v1only_permission(perm) {
    type role {
        private relation `${perm}`: [bool]
    }
}